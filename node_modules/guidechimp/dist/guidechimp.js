/*! GuideChimp v3.2.2 | Copyright (C) 2021 Labs64 GmbH */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["GuideChimp"] = factory();
	else
		root["GuideChimp"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(2);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

var _construct2 = _interopRequireDefault(__webpack_require__(4));

var _GuideChimp = _interopRequireDefault(__webpack_require__(7));

__webpack_require__(22);

/**
 * Copyright (C) 2020 Labs64 GmbH
 *
 * This source code is licensed under the European Union Public License, version 1.2
 * located in the LICENSE file
 */

/* ============
 * Styling
 * ============
 *
 * Import the library styling.
 */
var guideChimp = function guideChimp() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0, _construct2.default)(_GuideChimp.default, args);
};

guideChimp.prototype = _GuideChimp.default.prototype;
guideChimp.plugins = new Set();

guideChimp.extend = function (plugin) {
  if (!guideChimp.plugins.has(plugin)) {
    guideChimp.plugins.add(plugin);

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    plugin.apply(void 0, [_GuideChimp.default, guideChimp].concat(args));
  }

  return guideChimp;
};

module.exports = guideChimp;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(5);

var isNativeReflectConstruct = __webpack_require__(6);

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(0);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(__webpack_require__(8));

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(12));

var _regenerator = _interopRequireDefault(__webpack_require__(16));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(18));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(19));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(20));

var _createClass2 = _interopRequireDefault(__webpack_require__(21));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable class-methods-use-this */

/**
 * Copyright (C) 2020 Labs64 GmbH
 *
 * This source code is licensed under the European Union Public License, version 1.2
 * located in the LICENSE file
 */
var GuideChimp = /*#__PURE__*/function () {
  /**
   * GuideChimp constructor
   * @param tour
   * @param options
   */
  function GuideChimp(tour) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, GuideChimp);
    this.setDefaults();
    this.cache = new Map();
    this.listeners = {};
    this.observers = {};
    this.options = {};
    this.setOptions(options);
    this.tour = null;
    this.setTour(tour);
    this.notifications = [];
    this.init();
  }
  /**
   * Called after construction, this hook allows you to add some extra setup
   * logic without having to override the constructor.
   */


  (0, _createClass2.default)(GuideChimp, [{
    key: "init",
    value: function init() {}
    /**
     * Default options
     * @return {Object}
     */

  }, {
    key: "setDefaults",
    value: function setDefaults() {
      this.previousStep = null;
      this.currentStep = null;
      this.nextStep = null;
      this.fromStep = null;
      this.toStep = null;
      this.previousStepIndex = -1;
      this.currentStepIndex = -1;
      this.nextStepIndex = -1;
      this.fromStepIndex = -1;
      this.toStepIndex = -1;
      this.steps = [];
      return this;
    }
    /**
     * Set tour name or steps
     * @param tour
     * @return {this}
     */

  }, {
    key: "setTour",
    value: function setTour(tour) {
      this.tour = tour;
      return this;
    }
    /**
     * Get tour name or steps
     */

  }, {
    key: "getTour",
    value: function getTour() {
      return this.tour;
    }
    /**
     * Set tour options
     * @param options
     * @return {this}
     */

  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this.options = _objectSpread(_objectSpread({}, this.constructor.getDefaultOptions()), options);
      return this;
    }
    /**
     * Get tour options
     */

  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
    /**
     * Start tour
     * @param number step number or it index
     * @param useIndex whether to use step number or index
     * @return {Promise<boolean>}
     */

  }, {
    key: "start",
    value: function () {
      var _start = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var number,
            useIndex,
            isStarted,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                number = _args.length > 0 && _args[0] !== undefined ? _args[0] : 0;
                useIndex = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;
                this.mountOverlayLayer();
                this.startPreloader(); // emit start event

                _context.next = 6;
                return this.emit('onStart');

              case 6:
                this.stopPreloader();
                this.removeOverlayLayer();

                if (!(!this.tour || !this.tour.length)) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", false);

              case 10:
                this.steps = this.sortSteps(this.getSteps(this.tour));

                if (this.steps.length) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", false);

              case 13:
                // add a class that increase the specificity of the classes
                document.body.classList.add(this.constructor.getBodyClass());
                _context.next = 16;
                return this.go(number, useIndex);

              case 16:
                isStarted = _context.sent;
                document.body.classList.toggle(this.constructor.getBodyClass(), isStarted);

                if (isStarted) {
                  // turn on keyboard navigation
                  if (this.options.useKeyboard) {
                    this.addOnKeydownListener();
                  } // on window resize


                  this.addOnWindowResizeListener();
                }

                return _context.abrupt("return", isStarted);

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function start() {
        return _start.apply(this, arguments);
      }

      return start;
    }()
    /**
     * Go to step
     * @param number step number or it index
     * @param useIndex whether to use step number or index
     * @return {Promise<boolean>}
     */

  }, {
    key: "go",
    value: function () {
      var _go = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(number) {
        var _this = this;

        var useIndex,
            stepNumber,
            isSameStep,
            fromStep,
            fromStepIndex,
            currentStep,
            currentStepIndex,
            toStep,
            toStepIndex,
            onBeforeChange,
            onAfterChange,
            scrollBehavior,
            _this$currentStep$scr,
            scrollPadding,
            el,
            _args2 = arguments;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                useIndex = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : true;

                if (this.steps.length) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", false);

              case 3:
                stepNumber = useIndex ? parseInt(number, 10) : number;

                if (!this.currentStep) {
                  _context2.next = 8;
                  break;
                }

                // skip if this step is already displayed
                isSameStep = useIndex ? this.currentStepIndex === stepNumber : this.currentStep.step === stepNumber;

                if (!isSameStep) {
                  _context2.next = 8;
                  break;
                }

                return _context2.abrupt("return", false);

              case 8:
                fromStep = this.currentStep;
                fromStepIndex = this.currentStepIndex;
                currentStep = useIndex ? this.steps[stepNumber] : this.steps.filter(function (_ref) {
                  var step = _ref.step;
                  return step === stepNumber;
                })[0];

                if (currentStep) {
                  _context2.next = 13;
                  break;
                }

                return _context2.abrupt("return", false);

              case 13:
                currentStepIndex = this.steps.indexOf(currentStep);
                toStep = currentStep;
                toStepIndex = currentStepIndex;
                onBeforeChange = toStep.onBeforeChange, onAfterChange = toStep.onAfterChange;
                this.mountOverlayLayer();
                this.startPreloader();

                if (!onBeforeChange) {
                  _context2.next = 26;
                  break;
                }

                _context2.next = 22;
                return Promise.resolve().then(function () {
                  return onBeforeChange.call(_this, toStep, fromStep);
                });

              case 22:
                _context2.t0 = _context2.sent;

                if (!(_context2.t0 === false)) {
                  _context2.next = 26;
                  break;
                }

                this.stopPreloader();
                return _context2.abrupt("return", false);

              case 26:
                _context2.next = 28;
                return this.emit('onBeforeChange', toStep, fromStep);

              case 28:
                if (!_context2.sent.some(function (r) {
                  return r === false;
                })) {
                  _context2.next = 31;
                  break;
                }

                this.stopPreloader();
                return _context2.abrupt("return", false);

              case 31:
                this.stopPreloader();
                this.cleanupAfterPreviousStep();
                this.toStep = toStep;
                this.toStepIndex = toStepIndex;
                this.currentStep = currentStep;
                this.currentStepIndex = currentStepIndex;
                this.fromStep = fromStep;
                this.fromStepIndex = fromStepIndex;
                this.previousStep = this.steps[this.currentStepIndex - 1] || null;
                this.previousStepIndex = this.previousStep ? this.currentStepIndex - 1 : -1;
                this.nextStep = this.steps[this.currentStepIndex + 1] || null;
                this.nextStepIndex = this.nextStep ? this.currentStepIndex + 1 : -1;
                scrollBehavior = this.options.scrollBehavior;
                _this$currentStep$scr = this.currentStep.scrollPadding, scrollPadding = _this$currentStep$scr === void 0 ? this.options.scrollPadding : _this$currentStep$scr; // get step element

                el = this.getStepElement(this.currentStep, true); // scroll to element

                this.scrollParentsToStepElement();
                this.scrollTo(el, scrollBehavior, scrollPadding);
                this.mountStepTemplate();
                this.highlightStepElement(); // observers

                this.observeStep();
                setTimeout(function () {
                  if (_this.findTooltipElement()) {
                    _this.scrollTo(_this.findTooltipElement(), scrollBehavior, scrollPadding);
                  }
                }, 300);

                if (onAfterChange) {
                  onAfterChange.call(this, this.toStep, this.fromStep);
                }

                this.emit('onAfterChange', this.toStep, this.fromStep);
                return _context2.abrupt("return", true);

              case 55:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function go(_x) {
        return _go.apply(this, arguments);
      }

      return go;
    }()
  }, {
    key: "previous",
    value: function () {
      var _previous = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var _this2 = this;

        var onPrevious;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!this.currentStep || !this.previousStep)) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", false);

              case 2:
                onPrevious = this.currentStep.onPrevious;
                this.startPreloader();

                if (!onPrevious) {
                  _context3.next = 11;
                  break;
                }

                _context3.next = 7;
                return Promise.resolve().then(function () {
                  return onPrevious.call(_this2, _this2.previousStep, _this2.currentStep);
                });

              case 7:
                _context3.t0 = _context3.sent;

                if (!(_context3.t0 === false)) {
                  _context3.next = 11;
                  break;
                }

                this.stopPreloader();
                return _context3.abrupt("return", false);

              case 11:
                _context3.next = 13;
                return this.emit('onPrevious', this.previousStep, this.currentStep);

              case 13:
                if (!_context3.sent.some(function (r) {
                  return r === false;
                })) {
                  _context3.next = 16;
                  break;
                }

                this.stopPreloader();
                return _context3.abrupt("return", false);

              case 16:
                this.stopPreloader();
                return _context3.abrupt("return", this.go(this.previousStepIndex, true));

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function previous() {
        return _previous.apply(this, arguments);
      }

      return previous;
    }()
  }, {
    key: "next",
    value: function () {
      var _next = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        var _this3 = this;

        var onNext;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(!this.currentStep || !this.nextStep)) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", false);

              case 2:
                onNext = this.currentStep.onNext;
                this.startPreloader();

                if (!onNext) {
                  _context4.next = 11;
                  break;
                }

                _context4.next = 7;
                return Promise.resolve().then(function () {
                  return onNext.call(_this3, _this3.nextStep, _this3.currentStep);
                });

              case 7:
                _context4.t0 = _context4.sent;

                if (!(_context4.t0 === false)) {
                  _context4.next = 11;
                  break;
                }

                this.stopPreloader();
                return _context4.abrupt("return", false);

              case 11:
                _context4.next = 13;
                return this.emit('onNext', this.nextStep, this.currentStep);

              case 13:
                if (!_context4.sent.some(function (r) {
                  return r === false;
                })) {
                  _context4.next = 16;
                  break;
                }

                this.stopPreloader();
                return _context4.abrupt("return", false);

              case 16:
                this.stopPreloader();
                return _context4.abrupt("return", this.go(this.nextStepIndex, true));

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function next() {
        return _next.apply(this, arguments);
      }

      return next;
    }()
  }, {
    key: "stop",
    value: function () {
      var _stop = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.currentStepIndex === this.steps.length - 1)) {
                  _context5.next = 5;
                  break;
                }

                this.startPreloader();
                _context5.next = 4;
                return this.emit('onComplete');

              case 4:
                this.stopPreloader();

              case 5:
                this.startPreloader(); // emit stop event

                _context5.next = 8;
                return this.emit('onStop');

              case 8:
                this.stopPreloader(); // remove the class that increase the specificity of the classes

                document.body.classList.remove(this.constructor.getBodyClass()); // remove all highlighting

                this.resetHighlightingAll(); // remove events listeners

                this.removeListeners(); // disconnect observers

                this.unobserve(); // remove all layers and keys

                this.removeStepTemplate(); // clean cache

                this.cache.clear(); // set step variables to defaults

                this.setDefaults();
                return _context5.abrupt("return", this);

              case 17:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "getSteps",
    value: function getSteps(tour) {
      if (!tour || !tour.length) {
        return [];
      }

      return typeof tour === 'string' ? this.getDataSteps(tour) : this.getJsSteps(tour);
    }
  }, {
    key: "getDataSteps",
    value: function getDataSteps(tour) {
      var _this4 = this;

      var dataPrefix = 'data-guidechimp';
      var tourStepsEl = Array.from(document.querySelectorAll("[".concat(dataPrefix, "-tour*='").concat(tour, "']"))); // filter steps by tour name

      tourStepsEl = tourStepsEl.filter(function (v) {
        var tours = v.getAttribute("".concat(dataPrefix, "-tour")).split(',');
        return tours.includes(_this4.tour);
      });
      var dataTourRegExp = new RegExp("^".concat(dataPrefix, "-").concat(tour, "-[^-]+$"));
      var dataGlobalRegExp = new RegExp("^".concat(dataPrefix, "-[^-]+$"));
      return tourStepsEl.map(function (el, i) {
        var stepAttrs = {};

        for (var j = 0; j < el.attributes.length; j++) {
          var _el$attributes$j = el.attributes[j],
              attrName = _el$attributes$j.name,
              attrValue = _el$attributes$j.value;
          var isTourAttr = dataTourRegExp.test(attrName);
          var isGlobalAttr = isTourAttr ? false : dataGlobalRegExp.test(attrName);

          if (isTourAttr || isGlobalAttr) {
            var attrShortName = isTourAttr ? attrName.replace("".concat(dataPrefix, "-").concat(tour, "-"), '') : attrName.replace("".concat(dataPrefix, "-"), '');

            if (attrShortName !== 'tour') {
              if (isTourAttr || isGlobalAttr && !stepAttrs[attrShortName]) {
                stepAttrs[attrShortName] = attrValue;
              }
            }
          }
        }

        return _objectSpread(_objectSpread({
          step: i,
          title: '',
          description: '',
          position: _this4.options.position,
          interaction: _this4.options.interaction
        }, stepAttrs), {}, {
          element: el
        });
      });
    }
  }, {
    key: "getJsSteps",
    value: function getJsSteps(tour) {
      return tour.map(function (v, i) {
        return _objectSpread(_objectSpread({}, v), {}, {
          step: v.step || i
        });
      });
    }
  }, {
    key: "sortSteps",
    value: function sortSteps(steps) {
      var copy = (0, _toConsumableArray2.default)(steps);
      return copy.sort(function (a, b) {
        if (a.step < b.step) {
          return -1;
        }

        if (a.step > b.step) {
          return 1;
        }

        return 0;
      });
    }
  }, {
    key: "getStepElement",
    value: function getStepElement(step) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var _ref2 = step || {},
          element = _ref2.element;

      if (!element) {
        return this.mountDefaultElement();
      } // check cache


      var elsCache = this.cache.get('els') || new Map();
      var el = elsCache.has(element) && !force ? elsCache.get(element) : this.getElement(element, null);

      if (!el || el.style.display === 'none' || el.style.visibility === 'hidden') {
        el = this.mountDefaultElement();
      }

      elsCache.set(element, el);
      this.cache.set('els', elsCache);
      return el;
    }
  }, {
    key: "getElement",
    value: function getElement(selector) {
      var def = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var el = typeof selector === 'string' ? document.querySelector(selector) : selector;
      return el || def;
    }
  }, {
    key: "getScrollableParentsElements",
    value: function getScrollableParentsElements(el) {
      var parents = [];
      var htmlEl = el;

      while (htmlEl && htmlEl !== htmlEl.ownerDocument.body) {
        htmlEl = this.getScrollableParentElement(htmlEl);
        parents.push(htmlEl);
      }

      return parents;
    }
  }, {
    key: "getScrollableParentElement",
    value: function getScrollableParentElement(el) {
      var regex = /(auto|scroll)/;
      var elStyle = getComputedStyle(el);
      var elDocument = el.ownerDocument;

      var getClosestScrollableParent = function getClosestScrollableParent(parent) {
        if (!parent || parent === elDocument.body) {
          return elDocument.body;
        }

        var parentStyle = getComputedStyle(parent);

        if (elStyle.getPropertyValue('position') === 'fixed' && parentStyle.getPropertyValue('position') === 'static') {
          return getClosestScrollableParent(parent.parentElement);
        }

        var overflowX = parentStyle.getPropertyValue('overflow-x');
        var overflowY = parentStyle.getPropertyValue('overflow-y');

        if (regex.test(overflowX) || regex.test(overflowY)) {
          return parent;
        }

        return getClosestScrollableParent(parent.parentElement);
      };

      return elStyle.getPropertyValue('position') === 'fixed' ? elDocument.body : getClosestScrollableParent(el.parentElement);
    }
  }, {
    key: "scrollParentsToStepElement",
    value: function scrollParentsToStepElement() {
      var _this$currentStep$scr2 = this.currentStep.scrollPadding,
          scrollPadding = _this$currentStep$scr2 === void 0 ? this.options.scrollPadding : _this$currentStep$scr2;
      return this.scrollParentsToElement(this.getStepElement(this.currentStep), scrollPadding);
    }
  }, {
    key: "scrollParentsToElement",
    value: function scrollParentsToElement(el) {
      var scrollPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // get all scrollable parents
      var parents = this.getScrollableParentsElements(el);
      parents.forEach(function (parent) {
        if (parent !== document.body) {
          // eslint-disable-next-line no-param-reassign
          parent.scrollTop = el.offsetTop - parent.offsetTop - scrollPadding; // eslint-disable-next-line no-param-reassign

          parent.scrollLeft = el.offsetLeft - parent.offsetLeft - scrollPadding;
        }
      });
      return this;
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(el) {
      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
      var scrollPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var _el$getBoundingClient = el.getBoundingClientRect(),
          top = _el$getBoundingClient.top,
          bottom = _el$getBoundingClient.bottom,
          left = _el$getBoundingClient.left,
          right = _el$getBoundingClient.right;

      var _window = window,
          innerWidth = _window.innerWidth,
          innerHeight = _window.innerHeight;

      if (!(left >= 0 && right <= innerWidth)) {
        window.scrollBy({
          behavior: behavior,
          left: left - scrollPadding
        });
      }

      if (!(top >= 0 && bottom <= innerHeight)) {
        window.scrollBy({
          behavior: behavior,
          top: top - scrollPadding
        });
      }

      return this;
    }
  }, {
    key: "highlightStepElement",
    value: function highlightStepElement() {
      return this.highlightElement(this.getStepElement(this.currentStep));
    }
  }, {
    key: "highlightElement",
    value: function highlightElement(el) {
      var parentEl = el.parentElement;

      while (parentEl) {
        if (parentEl === el.ownerDocument.body) {
          break;
        }

        if (el instanceof SVGElement && parentEl.tagName.toLowerCase() === 'svg') {
          this.constructor.addClass(parentEl, "".concat(this.constructor.getHighlightedClass()));
          this.constructor.addClass(parentEl, this.constructor.getRelativePositionClass());
        }

        var parentElStyle = getComputedStyle(parentEl);
        var zIndex = parentElStyle.getPropertyValue('z-index');
        var opacity = parentElStyle.getPropertyValue('opacity');
        var transform = parentElStyle.getPropertyValue('transform');

        if (/[0-9]+/.test(zIndex) || opacity < 1 || transform && transform !== 'none') {
          this.constructor.addClass(parentEl, this.constructor.getFixStackingContextClass());
        }

        parentEl = parentEl.parentElement;
      }

      this.constructor.addClass(el, this.constructor.getHighlightedClass());
      var elStyle = getComputedStyle(el);

      if (!['absolute', 'relative', 'fixed'].includes(elStyle.getPropertyValue('position'))) {
        this.constructor.addClass(el, this.constructor.getRelativePositionClass());
      }

      var highlightElements = this.cache.get('highlightElements') || new Set();
      highlightElements.add(el);
      this.cache.set('highlightElements', highlightElements);
      return this;
    }
  }, {
    key: "resetHighlighting",
    value: function resetHighlighting(el) {
      if (el) {
        var els = this.cache.get('highlightElements');

        if (els) {
          els.delete(el);
        }

        el.classList.remove(this.constructor.getHighlightedClass());
        el.classList.remove(this.constructor.getRelativePositionClass());
        var parentEl = el.parentElement;

        while (parentEl) {
          if (parentEl === document.body) {
            break;
          }

          parentEl.classList.remove(this.constructor.getFixStackingContextClass());
          parentEl = parentEl.parentElement;
        }
      }

      return this;
    }
  }, {
    key: "resetHighlightingAll",
    value: function resetHighlightingAll() {
      var _this5 = this;

      var els = this.cache.get('highlightElements');

      if (els) {
        els = Array.from(els);

        if (els.length) {
          els.forEach(function (el) {
            _this5.resetHighlighting(el);
          });
        }
      }

      return this;
    }
  }, {
    key: "setLayerPosition",
    value: function setLayerPosition(layer) {
      var el = this.getStepElement(this.currentStep);

      if (!layer || !el) {
        return this;
      }

      var padding = this.options.padding;
      var elStyle = getComputedStyle(el);

      if (elStyle.getPropertyValue('position') === 'floating') {
        padding = 0;
      }

      var _this$constructor$get = this.constructor.getOffset(el),
          width = _this$constructor$get.width,
          height = _this$constructor$get.height,
          top = _this$constructor$get.top,
          left = _this$constructor$get.left;

      if (this.constructor.isFixed(el)) {
        this.constructor.addClass(layer, this.constructor.getFixedClass());
      } else {
        this.constructor.removeClass(layer, this.constructor.getFixedClass());
      }

      var layerStyle = layer.style; // set new position

      layerStyle.cssText = "width: ".concat(width + padding, "px;\n        height: ").concat(height + padding, "px;\n        top: ").concat(top - padding / 2, "px;\n        left: ").concat(left - padding / 2, "px;");
      return this;
    }
  }, {
    key: "setHighlightLayerPosition",
    value: function setHighlightLayerPosition() {
      return this.setLayerPosition.apply(this, arguments);
    }
  }, {
    key: "setInteractionLayerPosition",
    value: function setInteractionLayerPosition() {
      return this.setLayerPosition.apply(this, arguments);
    }
  }, {
    key: "setControlLayerPosition",
    value: function setControlLayerPosition(layer) {
      var el = this.getStepElement(this.currentStep);

      if (!layer || !el) {
        return this;
      }

      var padding = this.options.padding;
      var elStyle = getComputedStyle(el);

      if (elStyle.getPropertyValue('position') === 'floating') {
        padding = 0;
      }

      var pageXOffset = el.ownerDocument.defaultView.pageXOffset;

      var _el$ownerDocument$doc = el.ownerDocument.documentElement.getBoundingClientRect(),
          docElWidth = _el$ownerDocument$doc.width;

      var _this$constructor$get2 = this.constructor.getOffset(el),
          elHeight = _this$constructor$get2.height,
          elTop = _this$constructor$get2.top,
          elLeft = _this$constructor$get2.left,
          elRight = _this$constructor$get2.right;

      var height = elHeight + padding;
      var top = elTop - padding / 2;
      var left = pageXOffset < pageXOffset + (elLeft - padding / 2) ? pageXOffset : elLeft - padding / 2;
      var width = pageXOffset + docElWidth > pageXOffset + (elRight + padding / 2) ? docElWidth : elRight + padding / 2;

      if (this.constructor.isFixed(el)) {
        this.constructor.addClass(layer, this.constructor.getFixedClass());
      } else {
        this.constructor.removeClass(layer, this.constructor.getFixedClass());
      }

      var layerStyle = layer.style; // set new position

      layerStyle.cssText = "width: ".concat(width, "px;\n        height: ").concat(height, "px;\n        top: ").concat(top, "px;\n        left: ").concat(left, "px;");
      return this;
    }
  }, {
    key: "setTooltipElementPosition",
    value: function setTooltipElementPosition(layer) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.currentStep) {
        return this;
      }

      var el = this.getStepElement(this.currentStep);

      if (!layer || !el) {
        return this;
      }

      var boundary = options.boundary,
          position = options.position;
      var padding = this.options.padding;
      boundary = boundary || window;
      position = position || this.currentStep.position;
      position = position || this.options.position;
      var alignment = null;
      var elStyle = getComputedStyle(el);

      if (elStyle.getPropertyValue('position') === 'floating') {
        padding = 0;
      }

      var tooltipStyle = layer.style; // reset tooltip styles

      tooltipStyle.top = null;
      tooltipStyle.right = null;
      tooltipStyle.bottom = null;
      tooltipStyle.left = null;
      tooltipStyle.transform = null;

      var _el$getBoundingClient2 = el.getBoundingClientRect(),
          elTop = _el$getBoundingClient2.top,
          elBottom = _el$getBoundingClient2.bottom,
          elLeft = _el$getBoundingClient2.left,
          elRight = _el$getBoundingClient2.right,
          elWidth = _el$getBoundingClient2.width,
          elHeight = _el$getBoundingClient2.height;

      var _layer$getBoundingCli = layer.getBoundingClientRect(),
          tooltipHeight = _layer$getBoundingCli.height,
          tooltipWith = _layer$getBoundingCli.width; // find out min tooltip width


      var cloneTooltip = layer.cloneNode();
      cloneTooltip.style.visibility = 'hidden';
      cloneTooltip.innerHTML = '';
      layer.parentElement.appendChild(cloneTooltip);

      var _cloneTooltip$getBoun = cloneTooltip.getBoundingClientRect(),
          minTooltipWidth = _cloneTooltip$getBoun.width;

      cloneTooltip.parentElement.removeChild(cloneTooltip);
      var boundaryRect = new DOMRect(0, 0, window.innerWidth, window.innerHeight);

      if (!(boundary instanceof Window)) {
        var _boundary$getBounding = boundary.getBoundingClientRect(),
            x = _boundary$getBounding.x,
            y = _boundary$getBounding.y;

        boundaryRect = new DOMRect(x, y, boundary.scrollWidth, boundary.scrollHeight);
      }

      var _boundaryRect = boundaryRect,
          boundaryTop = _boundaryRect.top,
          boundaryBottom = _boundaryRect.bottom,
          boundaryLeft = _boundaryRect.left,
          boundaryRight = _boundaryRect.right; // if the element is default element, skip position and alignment calculation

      if (el.classList.contains(this.constructor.getDefaultElementClass())) {
        position = 'floating';
      } else {
        // calculate position
        var positions = ['bottom', 'right', 'left', 'top'];

        var _getComputedStyle = getComputedStyle(layer),
            tooltipMarginTop = _getComputedStyle.marginTop,
            tooltipMarginLeft = _getComputedStyle.marginLeft,
            tooltipMarginRight = _getComputedStyle.marginRight,
            tooltipMarginBottom = _getComputedStyle.marginBottom;

        tooltipMarginTop = parseInt(tooltipMarginTop, 10);
        tooltipMarginLeft = parseInt(tooltipMarginLeft, 10);
        tooltipMarginRight = parseInt(tooltipMarginRight, 10);
        tooltipMarginBottom = parseInt(tooltipMarginBottom, 10); // check if the tooltip can be placed on top

        if (tooltipHeight + tooltipMarginTop + tooltipMarginBottom > elTop - boundaryTop) {
          positions.splice(positions.indexOf('top'), 1);
        } // check if the tooltip can be placed on bottom


        if (tooltipHeight + tooltipMarginTop + tooltipMarginBottom > boundaryBottom - elBottom) {
          positions.splice(positions.indexOf('bottom'), 1);
        } // check if the tooltip can be placed on left


        if (minTooltipWidth + tooltipMarginLeft + tooltipMarginRight > elLeft - boundaryLeft) {
          positions.splice(positions.indexOf('left'), 1);
        } // check if the tooltip can be placed on right


        if (minTooltipWidth + tooltipMarginLeft + tooltipMarginRight > boundaryRight - elRight) {
          positions.splice(positions.indexOf('right'), 1);
        }

        if (positions.length) {
          position = positions.includes(position) ? position : positions[0];
        } else {
          position = 'floating';
        }

        if (position === 'top' || position === 'bottom') {
          var alignments = ['left', 'right', 'middle']; // valid left space must be at least tooltip width

          if (boundaryRight - elLeft < minTooltipWidth) {
            alignments.splice(alignments.indexOf('left'), 1);
          } // valid right space must be at least tooltip width


          if (elRight - boundaryLeft < minTooltipWidth) {
            alignments.splice(alignments.indexOf('right'), 1);
          } // valid middle space must be at least half width from both sides


          if (elLeft + elWidth / 2 - boundaryLeft < minTooltipWidth / 2 || boundaryRight - (elRight - elWidth / 2) < minTooltipWidth / 2) {
            alignments.splice(alignments.indexOf('middle'), 1);
          }

          alignment = alignments.length ? alignments[0] : 'middle';
        }
      }

      var root = document.documentElement;
      layer.setAttribute('data-guidechimp-position', position);

      switch (position) {
        case 'top':
          tooltipStyle.bottom = "".concat(elHeight + padding, "px");
          break;

        case 'right':
          tooltipStyle.left = "".concat(elRight + padding / 2 - root.clientLeft, "px");
          break;

        case 'left':
          tooltipStyle.right = "".concat(root.clientWidth - (elLeft - padding / 2), "px");
          break;

        case 'bottom':
          tooltipStyle.top = "".concat(elHeight + padding, "px");
          break;

        default:
          {
            tooltipStyle.left = '50%';
            tooltipStyle.top = '50%';
            tooltipStyle.transform = 'translate(-50%,-50%)';
          }
      }

      layer.removeAttribute('data-guidechimp-alignment');

      if (alignment) {
        layer.setAttribute('data-guidechimp-alignment', alignment);

        switch (alignment) {
          case 'left':
            {
              tooltipStyle.left = "".concat(elLeft - padding / 2, "px");
              break;
            }

          case 'right':
            {
              tooltipStyle.right = "".concat(root.clientWidth - elRight - padding / 2, "px");
              break;
            }

          default:
            {
              if (elLeft + elWidth / 2 < tooltipWith / 2 || elLeft + elWidth / 2 + tooltipWith / 2 > root.clientWidth) {
                tooltipStyle.left = "".concat(root.clientWidth / 2 - tooltipWith / 2, "px");
              } else {
                tooltipStyle.left = "".concat(elLeft + elWidth / 2 - tooltipWith / 2, "px");
              }
            }
        }
      }

      return this;
    }
  }, {
    key: "startPreloader",
    value: function startPreloader() {
      var _this6 = this;

      document.body.classList.add(this.constructor.getLoadingClass());
      var preloader = this.mountPreloaderElement(document.body);
      preloader.classList.add(this.constructor.getHiddenClass());
      setTimeout(function () {
        preloader.classList.remove(_this6.constructor.getHiddenClass());
      }, 100);
      return this;
    }
  }, {
    key: "stopPreloader",
    value: function stopPreloader() {
      document.body.classList.remove(this.constructor.getLoadingClass());
      this.removePreloaderElement();
      return this;
    }
    /**
     * @param parent {HTMLElement}
     * @returns {this}
     */

  }, {
    key: "mountStepTemplate",
    value: function mountStepTemplate() {
      // mount main layers
      this.mountHighlight(document.body);
      this.mountInteraction(document.body);
      this.mountControl(document.body);
      return this;
    }
  }, {
    key: "removeStepTemplate",
    value: function removeStepTemplate() {
      this.removeOverlayLayer();
      this.removeControlLayer();
      this.removeHighlightLayer();
      this.removeInteractionLayer();
      this.removeDefaultElement();
      return this;
    }
  }, {
    key: "mountElement",
    value: function mountElement(el, parent) {
      if (el.parentElement !== parent) {
        if (el.parentElement) {
          this.removeElement(el);
        }

        parent.appendChild(el);
      }

      return el;
    }
  }, {
    key: "removeElement",
    value: function removeElement(el) {
      if (el && el.parentElement) {
        el.parentElement.removeChild(el);
      }

      return this;
    }
  }, {
    key: "findDefaultElement",
    value: function findDefaultElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('defaultEl') || def;
    }
  }, {
    key: "createDefaultElement",
    value: function createDefaultElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getDefaultElementClass();
      return el;
    }
  }, {
    key: "mountDefaultElement",
    value: function mountDefaultElement() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findDefaultElement();

      if (!el) {
        el = this.createDefaultElement();
        this.cache.set('defaultEl', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "removeDefaultElement",
    value: function removeDefaultElement() {
      this.removeElement(this.findDefaultElement());
      this.cache.delete('defaultEl');
      return this;
    }
  }, {
    key: "findPreloaderElement",
    value: function findPreloaderElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('preloaderEl') || def;
    }
  }, {
    key: "createPreloaderElement",
    value: function createPreloaderElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getPreloaderClass();
      return el;
    }
  }, {
    key: "mountPreloaderElement",
    value: function mountPreloaderElement() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findPreloaderElement();

      if (!el) {
        el = this.createPreloaderElement();
        this.cache.set('preloaderEl', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "removePreloaderElement",
    value: function removePreloaderElement() {
      this.removeElement(this.findPreloaderElement());
      this.cache.delete('preloaderEl');
      return this;
    }
  }, {
    key: "findOverlayLayer",
    value: function findOverlayLayer() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('overlayLayer') || def;
    }
  }, {
    key: "createOverlayLayer",
    value: function createOverlayLayer() {
      var _this7 = this;

      var el = document.createElement('div');
      el.className = this.constructor.getOverlayClass();

      el.onclick = function () {
        var exitOverlay = _this7.options.exitOverlay;

        if (exitOverlay) {
          _this7.stop();
        }
      };

      return el;
    }
  }, {
    key: "mountOverlayLayer",
    value: function mountOverlayLayer() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findOverlayLayer();

      if (!el) {
        el = this.createOverlayLayer();
        this.cache.set('overlayLayer', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "removeOverlayLayer",
    value: function removeOverlayLayer() {
      this.removeElement(this.findOverlayLayer());
      this.cache.delete('overlayLayer');
      return this;
    }
  }, {
    key: "mountHighlight",
    value: function mountHighlight() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.mountHighlightLayer(parent);
      this.setHighlightLayerPosition(el);
      return el;
    }
  }, {
    key: "findHighlightLayer",
    value: function findHighlightLayer() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('highlightLayer') || def;
    }
  }, {
    key: "createHighlightLayer",
    value: function createHighlightLayer() {
      var el = document.createElement('div');
      el.className = this.constructor.getHighlightClass();
      return el;
    }
  }, {
    key: "mountHighlightLayer",
    value: function mountHighlightLayer() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findHighlightLayer();

      if (!el) {
        el = this.createHighlightLayer();
        this.cache.set('highlightLayer', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "removeHighlightLayer",
    value: function removeHighlightLayer() {
      this.removeElement(this.findHighlightLayer());
      this.cache.delete('highlightLayer');
      return this;
    }
  }, {
    key: "mountInteraction",
    value: function mountInteraction() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.mountInteractionLayer(parent);
      this.setInteractionLayerPosition(el);
      return el;
    }
  }, {
    key: "findInteractionLayer",
    value: function findInteractionLayer() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('interactionLayer') || def;
    }
  }, {
    key: "createInteractionLayer",
    value: function createInteractionLayer() {
      var el = document.createElement('div');
      el.className = this.constructor.getInteractionClass();
      return el;
    }
  }, {
    key: "mountInteractionLayer",
    value: function mountInteractionLayer() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findInteractionLayer();

      if (!el) {
        el = this.createInteractionLayer();
        this.cache.set('interactionLayer', el);
      }

      var interaction = this.options.interaction;

      if (this.currentStep && typeof this.currentStep.interaction === 'boolean') {
        interaction = this.currentStep.interaction;
      } // disable/enable interaction


      el.classList.toggle(this.constructor.getDisableInteractionClass(), !interaction);
      return this.mountElement(el, parent);
    }
  }, {
    key: "removeInteractionLayer",
    value: function removeInteractionLayer() {
      this.removeElement(this.findInteractionLayer());
      this.cache.delete('interactionLayer');
      return this;
    }
  }, {
    key: "mountControl",
    value: function mountControl() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.mountControlLayer(parent);
      this.mountTooltip(el);
      this.setControlLayerPosition(el);
      return el;
    }
  }, {
    key: "findControlLayer",
    value: function findControlLayer() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('controlLayer') || def;
    }
  }, {
    key: "createControlLayer",
    value: function createControlLayer() {
      var el = document.createElement('div');
      el.className = this.constructor.getControlClass();
      return el;
    }
  }, {
    key: "mountControlLayer",
    value: function mountControlLayer() {
      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var el = this.findControlLayer();

      if (!el) {
        el = this.createControlLayer();
        this.cache.set('controlLayer', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "removeControlLayer",
    value: function removeControlLayer() {
      this.removeElement(this.findControlLayer());
      this.cache.delete('controlLayer');
      return this;
    }
  }, {
    key: "mountTooltip",
    value: function mountTooltip(parent) {
      var tooltip = this.mountTooltipElement(parent);
      this.mountTooltipTailElement(tooltip);
      this.mountProgressbarElement(tooltip);
      this.mountTitleElement(tooltip);
      this.mountDescriptionElement(tooltip);
      this.mountCloseElement(tooltip);
      this.mountCustomButtonsElement(tooltip);
      this.mountNavigation(tooltip);
      this.mountCopyrightElement(tooltip);
      this.mountNotificationElement(tooltip);
      this.setTooltipElementPosition(tooltip, {
        boundary: document.documentElement
      });
      return tooltip;
    }
  }, {
    key: "findTooltipElement",
    value: function findTooltipElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('tooltipLayer') || def;
    }
  }, {
    key: "createTooltipElement",
    value: function createTooltipElement() {
      var el = document.createElement('div');
      el.setAttribute('role', 'dialog');
      el.className = this.constructor.getTooltipClass();
      return el;
    }
  }, {
    key: "mountTooltipElement",
    value: function mountTooltipElement(parent) {
      var el = this.findTooltipElement();

      if (!el) {
        el = this.createTooltipElement();
        this.cache.set('tooltipLayer', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "findTooltipTailElement",
    value: function findTooltipTailElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('tooltipTailEl') || def;
    }
  }, {
    key: "createTooltipTailElement",
    value: function createTooltipTailElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getTooltipTailClass();
      return el;
    }
  }, {
    key: "mountTooltipTailElement",
    value: function mountTooltipTailElement(parent) {
      var el = this.findTooltipTailElement();

      if (!el) {
        el = this.createTooltipTailElement();
        this.cache.set('tooltipTailEl', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "findCloseElement",
    value: function findCloseElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('closeEl') || def;
    }
  }, {
    key: "createCloseElement",
    value: function createCloseElement() {
      var _this8 = this;

      var el = document.createElement('div');
      el.className = this.constructor.getCloseClass();

      el.onclick = function () {
        return _this8.stop();
      };

      return el;
    }
  }, {
    key: "mountCloseElement",
    value: function mountCloseElement(parent) {
      var el = this.findCloseElement();

      if (!el) {
        el = this.createCloseElement();
        this.cache.set('closeEl', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "findProgressbarElement",
    value: function findProgressbarElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('progressbarEl') || def;
    }
  }, {
    key: "createProgressbarElement",
    value: function createProgressbarElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getProgressbarClass();
      el.setAttribute('role', 'progress');
      el.setAttribute('aria-valuemin', 0);
      el.setAttribute('aria-valuemax', 100);
      return el;
    }
  }, {
    key: "mountProgressbarElement",
    value: function mountProgressbarElement(parent) {
      var el = this.findProgressbarElement();

      if (!el) {
        el = this.createProgressbarElement();
        this.cache.set('progressbarEl', el);
      }

      var showProgressbar = this.options.showProgressbar;
      el.classList.toggle(this.constructor.getHiddenClass(), !showProgressbar);
      var index = this.steps.indexOf(this.currentStep);
      var progress = (index + 1) / this.steps.length * 100;
      el.setAttribute('aria-valuenow', progress);
      el.style.cssText = "width: ".concat(progress, "%;");
      return this.mountElement(el, parent);
    }
  }, {
    key: "findTitleElement",
    value: function findTitleElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('titleEl') || def;
    }
  }, {
    key: "createTitleElement",
    value: function createTitleElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getTitleClass();
      return el;
    }
  }, {
    key: "mountTitleElement",
    value: function mountTitleElement(parent) {
      var el = this.findTitleElement();

      if (!el) {
        el = this.createTitleElement();
        this.cache.set('titleEl', el);
      }

      var _this$currentStep$tit = this.currentStep.title,
          title = _this$currentStep$tit === void 0 ? '' : _this$currentStep$tit;
      el.innerHTML = title;
      el.classList.toggle(this.constructor.getHiddenClass(), !title);
      return this.mountElement(el, parent);
    }
  }, {
    key: "findDescriptionElement",
    value: function findDescriptionElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('descriptionEl') || def;
    }
  }, {
    key: "createDescriptionElement",
    value: function createDescriptionElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getDescriptionClass();
      return el;
    }
  }, {
    key: "mountDescriptionElement",
    value: function mountDescriptionElement(parent) {
      var el = this.findDescriptionElement();

      if (!el) {
        el = this.createDescriptionElement();
        this.cache.set('descriptionEl', el);
      }

      var _this$currentStep$des = this.currentStep.description,
          description = _this$currentStep$des === void 0 ? '' : _this$currentStep$des;
      el.innerHTML = description;
      el.classList.toggle(this.constructor.getHiddenClass(), !description);
      return this.mountElement(el, parent);
    }
  }, {
    key: "findCustomButtonsElement",
    value: function findCustomButtonsElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('customButtonsEl') || def;
    }
  }, {
    key: "createCustomButtonsElement",
    value: function createCustomButtonsElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getCustomButtonsClass();
      return el;
    }
  }, {
    key: "mountCustomButtonsElement",
    value: function mountCustomButtonsElement(parent) {
      var _this9 = this;

      var el = this.findCustomButtonsElement();

      if (!el) {
        el = this.createCustomButtonsElement();
        this.cache.set('customButtonsEl', el);
      } // clean layer from previous buttons


      el.innerHTML = '';
      var _this$currentStep$but = this.currentStep.buttons,
          buttons = _this$currentStep$but === void 0 ? [] : _this$currentStep$but;
      el.classList.toggle(this.constructor.getHiddenClass(), !buttons.length);
      buttons.forEach(function (button) {
        el.appendChild(button.ownerDocument ? button : _this9.createCustomButtonElement(button));
      });
      return this.mountElement(el, parent);
    }
  }, {
    key: "createCustomButtonElement",
    value: function createCustomButtonElement(_ref3) {
      var _this10 = this;

      var _ref3$tagName = _ref3.tagName,
          tagName = _ref3$tagName === void 0 ? 'button' : _ref3$tagName,
          _ref3$title = _ref3.title,
          title = _ref3$title === void 0 ? '' : _ref3$title,
          className = _ref3.class,
          onClick = _ref3.onClick;
      var el = document.createElement(tagName);
      el.innerHTML = title;

      if (className) {
        el.className = className;
      }

      if (onClick) {
        el.onclick = function (e) {
          return onClick.call(_this10, e);
        };
      }

      return el;
    }
  }, {
    key: "mountNavigation",
    value: function mountNavigation(parent) {
      var _this11 = this;

      var navigation = this.mountNavigationElement(parent);
      var prev = this.mountNavigationPrevElement(navigation);
      var pagination = this.mountPaginationElement(navigation);
      var next = this.mountNavigationNextElement(navigation);
      navigation.classList.toggle(this.constructor.getHiddenClass(), [prev, pagination, next].every(function (el) {
        return el.classList.contains(_this11.constructor.getHiddenClass());
      }));
      return navigation;
    }
  }, {
    key: "findNavigationElement",
    value: function findNavigationElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('navigationEl') || def;
    }
  }, {
    key: "createNavigationElement",
    value: function createNavigationElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getNavigationClass();
      return el;
    }
  }, {
    key: "mountNavigationElement",
    value: function mountNavigationElement(parent) {
      var el = this.findNavigationElement();

      if (!el) {
        el = this.createNavigationElement();
        this.cache.set('navigationEl', el);
      }

      return this.mountElement(el, parent);
    }
  }, {
    key: "findPaginationElement",
    value: function findPaginationElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('paginationEl') || def;
    }
  }, {
    key: "createPaginationElement",
    value: function createPaginationElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getPaginationClass();
      return el;
    }
  }, {
    key: "mountPaginationElement",
    value: function mountPaginationElement(parent) {
      var _this12 = this;

      var el = this.findPaginationElement();

      if (!el) {
        el = this.createPaginationElement();
        this.cache.set('paginationEl', el);
      } // cleanup pagination


      el.innerHTML = '';
      var showPagination = this.options.showPagination;
      el.classList.toggle(this.constructor.getHiddenClass(), !showPagination || this.steps.length <= 1);
      this.steps.forEach(function (s, i) {
        el.appendChild(_this12.createPaginationItemElement(s, i));
      });
      return this.mountElement(el, parent);
    }
  }, {
    key: "createPaginationItemElement",
    value: function createPaginationItemElement(step, index) {
      var _this13 = this;

      var el = document.createElement('div');
      el.className = this.constructor.getPaginationItemClass();

      if (this.currentStep === step) {
        el.classList.add(this.constructor.getPaginationCurrentItemClass());
      }

      el.onclick = function () {
        switch (index) {
          case _this13.previousStepIndex:
            {
              return _this13.previous();
            }

          case _this13.nextStepIndex:
            {
              return _this13.next();
            }

          default:
            {
              return _this13.go(index, true);
            }
        }
      };

      return el;
    }
  }, {
    key: "findNavigationPrevElement",
    value: function findNavigationPrevElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('navigationPrevEl') || def;
    }
  }, {
    key: "createNavigationPrevElement",
    value: function createNavigationPrevElement() {
      var _this14 = this;

      var el = document.createElement('div');
      el.className = this.constructor.getNavigationPrevClass();

      el.onclick = function () {
        return _this14.previous();
      };

      return el;
    }
  }, {
    key: "mountNavigationPrevElement",
    value: function mountNavigationPrevElement(parent) {
      var el = this.findNavigationPrevElement();

      if (!el) {
        el = this.createNavigationPrevElement();
        this.cache.set('navigationPrevEl', el);
      }

      el.classList.toggle(this.constructor.getHiddenClass(), this.previousStepIndex < 0);
      return this.mountElement(el, parent);
    }
  }, {
    key: "findNavigationNextElement",
    value: function findNavigationNextElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('navigationNextEl') || def;
    }
  }, {
    key: "createNavigationNextElement",
    value: function createNavigationNextElement() {
      var _this15 = this;

      var el = document.createElement('div');
      el.className = this.constructor.getNavigationNextClass();

      el.onclick = function () {
        return _this15.next();
      };

      return el;
    }
  }, {
    key: "mountNavigationNextElement",
    value: function mountNavigationNextElement(parent) {
      var el = this.findNavigationNextElement();

      if (!el) {
        el = this.createNavigationNextElement();
        this.cache.set('navigationNextEl', el);
      }

      el.classList.toggle(this.constructor.getHiddenClass(), this.nextStepIndex < 0);
      return this.mountElement(el, parent);
    }
  }, {
    key: "findCopyrightElement",
    value: function findCopyrightElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('copyrightEl') || def;
    }
  }, {
    key: "createCopyrightElement",
    value: function createCopyrightElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getCopyrightClass();
      return el;
    }
  }, {
    key: "mountCopyrightElement",
    value: function mountCopyrightElement(parent) {
      var el = this.findCopyrightElement();

      if (!el) {
        el = this.createCopyrightElement();
        this.cache.set('copyrightEl', el);
      }

      el.innerHTML = 'Made with GuideChimp';
      return this.mountElement(el, parent);
    }
  }, {
    key: "findNotificationElement",
    value: function findNotificationElement() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return this.cache.get('notificationEl') || def;
    }
  }, {
    key: "createNotificationElement",
    value: function createNotificationElement() {
      var el = document.createElement('div');
      el.className = this.constructor.getNotificationClass();
      return el;
    }
  }, {
    key: "mountNotificationElement",
    value: function mountNotificationElement(parent) {
      var el = this.findNotificationElement();

      if (!el) {
        el = this.createNotificationElement();
        this.cache.set('notificationEl', el);
      }

      var _this$notifications = (0, _slicedToArray2.default)(this.notifications, 1),
          _this$notifications$ = _this$notifications[0],
          message = _this$notifications$ === void 0 ? '' : _this$notifications$;

      el.innerHTML = message;
      return this.mountElement(el, parent);
    }
  }, {
    key: "removeNotificationElement",
    value: function removeNotificationElement() {
      this.removeElement(this.findControlLayer());
      this.cache.delete('controlLayer');
      return this;
    }
  }, {
    key: "notify",
    value: function notify(message) {
      this.notifications.push(message);
      var el = this.findNotificationElement();

      if (el) {
        el.innerHTML = message;
      }

      return this;
    }
    /**
     * Register an event listener for a tour event.
     *
     * Event names can be comma-separated to register multiple events.
     *
     * @param {string} event The name of the event to listen for.
     * @param {function} listener The event listener, accepts context.
     * @param {object} options Listener options
     * @return {this}
     */

  }, {
    key: "on",
    value: function on(event, listener) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      // priorities from low to high
      var priorities = this.constructor.getEventListenersPriorities();

      var _priorities = (0, _slicedToArray2.default)(priorities, 1),
          priority = _priorities[0];

      if (options.priority && priorities.includes(options.priority)) {
        priority = options.priority;
      }

      var e = event.trim();
      this.listeners[e] = this.listeners[e] || {};
      this.listeners[e][priority] = this.listeners[e][priority] || [];
      this.listeners[e][priority].push(listener);
      return this;
    }
    /**
     * Emits an event by name to all registered listeners on that event.
     * Listeners will be called in the order that they were added. If a listener
     * returns `false`, no other listeners will be called.
     *
     * @param {string} event    The name of the event to emit.
     * @param args  The context args of the event, passed to listeners.
     * @returns {Promise}
     */

  }, {
    key: "emit",
    value: function emit(event) {
      var _this16 = this;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // from high to low
      var priorities = (0, _toConsumableArray2.default)(this.constructor.getEventListenersPriorities()).reverse();
      var e = event.trim();
      var result = [];
      var promise = Promise.resolve(result);

      if (this.listeners[e]) {
        priorities.forEach(function (priority) {
          var listeners = _this16.listeners[e][priority];

          if (listeners) {
            promise = promise.then(function () {
              return Promise.all(listeners.map(function (f) {
                return Promise.resolve().then(function () {
                  return f.apply(_this16, args);
                });
              }));
            }).then(function (r) {
              result = [].concat((0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(r));
              return result;
            });
          }
        });
      }

      return promise;
    }
    /**
     * Add keydown event listener
     * @return {this}
     */

  }, {
    key: "addOnKeydownListener",
    value: function addOnKeydownListener() {
      // turn on keyboard navigation
      this.cache.set('onKeydownListener', this.getOnKeydownListener());
      window.addEventListener('keydown', this.cache.get('onKeydownListener'), true);
      return this;
    }
    /**
     * Return on key down event listener function
     * @returns {function}
     */

  }, {
    key: "getOnKeydownListener",
    value: function getOnKeydownListener() {
      var _this17 = this;

      return function (event) {
        var keyCode = event.keyCode;

        var _this17$constructor$g = _objectSpread(_objectSpread({}, _this17.constructor.getDefaultKeyboardCodes()), _this17.options.useKeyboard),
            previousCodes = _this17$constructor$g.previous,
            nextCodes = _this17$constructor$g.next,
            stopCodes = _this17$constructor$g.stop; //  stop tour


        if (stopCodes && stopCodes.includes(keyCode)) {
          _this17.stop();

          return;
        } // go to the previous step


        if (previousCodes && previousCodes.includes(keyCode)) {
          _this17.previous();

          return;
        } // go to the next step


        if (nextCodes && nextCodes.includes(keyCode)) {
          _this17.next();
        }
      };
    }
    /**
     * Remove keydown event listener
     * @return {this}
     */

  }, {
    key: "removeOnKeydownListener",
    value: function removeOnKeydownListener() {
      if (this.cache.has('onKeydownListener')) {
        window.removeEventListener('keydown', this.cache.get('onKeydownListener'), true);
        this.cache.delete('onKeydownListener');
      }

      return this;
    }
    /**
     * Add window resize event listener
     * @return {this}
     */

  }, {
    key: "addOnWindowResizeListener",
    value: function addOnWindowResizeListener() {
      // turn on keyboard navigation
      this.cache.set('onWindowResizeListener', this.getOnWindowResizeListener());
      window.addEventListener('resize', this.cache.get('onWindowResizeListener'), true);
      return this;
    }
    /**
     * Return on window resize event listener function
     * @returns {function}
     */

  }, {
    key: "getOnWindowResizeListener",
    value: function getOnWindowResizeListener() {
      var _this18 = this;

      return function () {
        return _this18.refresh();
      };
    }
    /**
     * Remove window resize event listener
     * @return {this}
     */

  }, {
    key: "removeOnWindowResizeListener",
    value: function removeOnWindowResizeListener() {
      if (this.cache.has('onWindowResizeListener')) {
        window.removeEventListener('resize', this.cache.get('onWindowResizeListener'), true);
        this.cache.delete('onWindowResizeListener');
      }

      return this;
    }
  }, {
    key: "removeListeners",
    value: function removeListeners() {
      this.removeOnKeydownListener();
      this.removeOnWindowResizeListener();
    }
  }, {
    key: "observeStep",
    value: function observeStep() {
      this.observeResizing();
      this.observeMutation();
    }
  }, {
    key: "observeResizing",
    value: function observeResizing() {
      var _this19 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        box: 'border-box'
      };
      var observer = this.observers.resizingObserver;

      if (!observer && typeof ResizeObserver !== 'undefined') {
        observer = new ResizeObserver(function () {
          if (!_this19 && !_this19.currentStep) {
            return;
          }

          _this19.refresh();
        });
        this.observers.resizingObserver = observer;
      }

      if (observer) {
        // observe elements
        observer.observe(this.getStepElement(this.currentStep), options);
        return true;
      }

      return false;
    }
  }, {
    key: "unobserveResizing",
    value: function unobserveResizing() {
      var observer = this.observers.resizingObserver;

      if (observer) {
        observer.disconnect();
        return true;
      }

      return false;
    }
  }, {
    key: "observeMutation",
    value: function observeMutation() {
      var _this20 = this;

      var observer = this.observers.mutationObserver;
      var elExists = true;

      if (!observer) {
        observer = new MutationObserver(function (mutations) {
          if (!_this20 && !_this20.currentStep) {
            return;
          }

          var el = _this20.getStepElement(_this20.currentStep);

          var refresh = function refresh() {
            _this20.resetHighlighting(el);

            _this20.highlightStepElement();

            _this20.scrollParentsToStepElement();

            _this20.refresh();
          };

          if (elExists) {
            mutations.forEach(function (record) {
              if (record.type === 'childList' && record.removedNodes.length) {
                record.removedNodes.forEach(function (node) {
                  if (node === el || node.contains(el)) {
                    var newEl = _this20.getStepElement(_this20.currentStep, true);

                    var defaultEl = _this20.findDefaultElement();

                    refresh();

                    if (newEl === defaultEl) {
                      elExists = false;
                    }
                  }
                });
              }
            });
          } else {
            var newEl = _this20.getStepElement(_this20.currentStep, true);

            var defaultEl = _this20.findDefaultElement();

            mutations.forEach(function (record) {
              if (record.type === 'childList' && record.addedNodes.length) {
                if (newEl !== defaultEl) {
                  refresh();
                  elExists = true;
                }
              }
            });
          }
        });
        this.observers.mutationObserver = observer;
      }

      observer.observe(this.getStepElement(this.currentStep).ownerDocument.body, {
        childList: true,
        subtree: true
      });
      return true;
    }
  }, {
    key: "unobserveMutation",
    value: function unobserveMutation() {
      var observer = this.observers.mutationObserver;

      if (observer) {
        observer.disconnect();
        return true;
      }

      return false;
    }
  }, {
    key: "unobserve",
    value: function unobserve() {
      this.unobserveResizing();
      this.unobserveMutation();
    }
  }, {
    key: "cleanupAfterPreviousStep",
    value: function cleanupAfterPreviousStep() {
      // remove all highlighting
      this.resetHighlightingAll(); // remove previous step element observers

      this.unobserve();
    }
    /**
     * Refresh layers position
     * @returns {this}
     */

  }, {
    key: "refresh",
    value: function refresh() {
      if (!this.currentStep) {
        return this;
      }

      if (this.findHighlightLayer()) {
        this.setHighlightLayerPosition(this.findHighlightLayer());
      }

      if (this.findInteractionLayer()) {
        this.setInteractionLayerPosition(this.findInteractionLayer());
      }

      if (this.findControlLayer()) {
        this.setControlLayerPosition(this.findControlLayer());
      }

      if (this.findTooltipElement()) {
        this.setTooltipElementPosition(this.findTooltipElement(), {
          boundary: window
        });
      }

      return this;
    }
  }], [{
    key: "getDefaultOptions",
    value: function getDefaultOptions() {
      return {
        position: 'bottom',
        useKeyboard: true,
        exitEscape: true,
        exitOverlay: true,
        showPagination: true,
        showProgressbar: true,
        interaction: true,
        padding: 10,
        scrollPadding: 10,
        scrollBehavior: 'auto'
      };
    }
  }, {
    key: "getDefaultKeyboardCodes",
    value: function getDefaultKeyboardCodes() {
      var escCode = 27;
      var arrowLeftCode = 37;
      var arrowRightCode = 39;
      var enterCode = 13;
      var spaceCode = 32;
      return {
        previous: [arrowLeftCode],
        next: [arrowRightCode, enterCode, spaceCode],
        stop: [escCode]
      };
    }
  }, {
    key: "getEventListenersPriorities",
    value: function getEventListenersPriorities() {
      return ['low', 'medium', 'high', 'critical'];
    }
  }, {
    key: "getBodyClass",
    value: function getBodyClass() {
      return 'gc';
    }
  }, {
    key: "getDefaultElementClass",
    value: function getDefaultElementClass() {
      return 'gc-default';
    }
  }, {
    key: "getFixStackingContextClass",
    value: function getFixStackingContextClass() {
      return 'gc-fix-stacking-context';
    }
  }, {
    key: "getHighlightedClass",
    value: function getHighlightedClass() {
      return 'gc-highlighted';
    }
  }, {
    key: "getLoadingClass",
    value: function getLoadingClass() {
      return 'gc-loading';
    }
  }, {
    key: "getPreloaderClass",
    value: function getPreloaderClass() {
      return 'gc-preloader';
    }
  }, {
    key: "getOverlayClass",
    value: function getOverlayClass() {
      return 'gc-overlay';
    }
  }, {
    key: "getFixedClass",
    value: function getFixedClass() {
      return 'gc-fixed';
    }
  }, {
    key: "getHighlightClass",
    value: function getHighlightClass() {
      return 'gc-highlight';
    }
  }, {
    key: "getControlClass",
    value: function getControlClass() {
      return 'gc-control';
    }
  }, {
    key: "getInteractionClass",
    value: function getInteractionClass() {
      return 'gc-interaction';
    }
  }, {
    key: "getTooltipClass",
    value: function getTooltipClass() {
      return 'gc-tooltip';
    }
  }, {
    key: "getTooltipTailClass",
    value: function getTooltipTailClass() {
      return 'gc-tooltip-tail';
    }
  }, {
    key: "getTitleClass",
    value: function getTitleClass() {
      return 'gc-title';
    }
  }, {
    key: "getDescriptionClass",
    value: function getDescriptionClass() {
      return 'gc-description';
    }
  }, {
    key: "getCustomButtonsClass",
    value: function getCustomButtonsClass() {
      return 'gc-custom-buttons';
    }
  }, {
    key: "getNavigationClass",
    value: function getNavigationClass() {
      return 'gc-navigation';
    }
  }, {
    key: "getNavigationPrevClass",
    value: function getNavigationPrevClass() {
      return 'gc-navigation-prev';
    }
  }, {
    key: "getNavigationNextClass",
    value: function getNavigationNextClass() {
      return 'gc-navigation-next';
    }
  }, {
    key: "getCloseClass",
    value: function getCloseClass() {
      return 'gc-close';
    }
  }, {
    key: "getPaginationClass",
    value: function getPaginationClass() {
      return 'gc-pagination';
    }
  }, {
    key: "getPaginationItemClass",
    value: function getPaginationItemClass() {
      return 'gc-pagination-item';
    }
  }, {
    key: "getPaginationCurrentItemClass",
    value: function getPaginationCurrentItemClass() {
      return 'gc-pagination-active';
    }
  }, {
    key: "getProgressbarClass",
    value: function getProgressbarClass() {
      return 'gc-progressbar';
    }
  }, {
    key: "getDisableInteractionClass",
    value: function getDisableInteractionClass() {
      return 'gc-disable';
    }
  }, {
    key: "getCopyrightClass",
    value: function getCopyrightClass() {
      return 'gc-copyright';
    }
  }, {
    key: "getNotificationClass",
    value: function getNotificationClass() {
      return 'gc-notification';
    }
  }, {
    key: "getHiddenClass",
    value: function getHiddenClass() {
      return 'gc-hidden';
    }
  }, {
    key: "getRelativePositionClass",
    value: function getRelativePositionClass() {
      return 'gc-relative';
    }
    /**
     * Get element offset
     * @param el
     * @return {{top: number, left: number, width: number, height: number}}
     */

  }, {
    key: "getOffset",
    value: function getOffset(el) {
      var _el$ownerDocument = el.ownerDocument,
          body = _el$ownerDocument.body,
          documentElement = _el$ownerDocument.documentElement,
          view = _el$ownerDocument.defaultView;
      var scrollTop = view.pageYOffset || documentElement.scrollTop || body.scrollTop;
      var scrollLeft = view.pageXOffset || documentElement.scrollLeft || body.scrollLeft;

      var _el$getBoundingClient3 = el.getBoundingClientRect(),
          top = _el$getBoundingClient3.top,
          right = _el$getBoundingClient3.right,
          bottom = _el$getBoundingClient3.bottom,
          left = _el$getBoundingClient3.left,
          width = _el$getBoundingClient3.width,
          height = _el$getBoundingClient3.height,
          x = _el$getBoundingClient3.x,
          y = _el$getBoundingClient3.y;

      return {
        right: right,
        bottom: bottom,
        width: width,
        height: height,
        x: x,
        y: y,
        top: top + scrollTop,
        left: left + scrollLeft
      };
    }
    /**
     * Check if el or his parent has fixed position
     * @param el
     * @return {boolean}
     */

  }, {
    key: "isFixed",
    value: function isFixed(el) {
      var parentNode = el.parentNode;

      if (!parentNode || parentNode.nodeName === 'HTML') {
        return false;
      }

      var elStyle = getComputedStyle(el);

      if (elStyle.getPropertyValue('position') === 'fixed') {
        return true;
      }

      return this.isFixed(parentNode);
    }
    /**
     * Add class to el
     * @param el
     * @param className
     */

  }, {
    key: "addClass",
    value: function addClass(el, className) {
      if (el instanceof SVGElement) {
        el.setAttribute('class', "".concat(el.getAttribute('class') || '', " ").concat(className));
        return;
      }

      el.classList.add(className);
    }
    /**
     * Remove class from el
     * @param el
     * @param className
     */

  }, {
    key: "removeClass",
    value: function removeClass(el, className) {
      if (el instanceof SVGElement) {
        var classes = el.getAttribute('class') || '';
        classes.replace(className, '');
        el.setAttribute('class', classes);
        return;
      }

      el.classList.remove(className);
    }
  }]);
  return GuideChimp;
}();

exports.default = GuideChimp;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(9);

var iterableToArrayLimit = __webpack_require__(10);

var unsupportedIterableToArray = __webpack_require__(1);

var nonIterableRest = __webpack_require__(11);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(13);

var iterableToArray = __webpack_require__(14);

var unsupportedIterableToArray = __webpack_require__(1);

var nonIterableSpread = __webpack_require__(15);

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(2);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(17);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),
/* 18 */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })
/******/ ]);
});
//# sourceMappingURL=guidechimp.js.map